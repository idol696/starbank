package com.skypro.starbank.bots;

import com.skypro.starbank.events.TelegramMessageEvent;
import com.skypro.starbank.exception.BotHandlerNotFound;
import com.skypro.starbank.exception.BotUpdateException;
import com.skypro.starbank.service.bothandlers.BotHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
 */
@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final Map<String, BotHandler> handlers;
    private static final Logger logger = LoggerFactory.getLogger(TelegramBot.class);
    private final String botUsername;
    private final String defaultCommand;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ TelegramBot.
     *
     * @param botToken  –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather.
     * @param botUsername –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞.
     * @param botHandlers –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –±–∏–Ω–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞–ø–ø—è—â–∏—Ö—Å—è –ø–æ –∏—Ö –∫–æ–º–∞–Ω–¥–µ.
     */
    public TelegramBot(
            @Value("${telegram.bot.token}") String botToken,
            @Value("${telegram.bot.username}") String botUsername,
            @Value("${telegram.bot.default-command}") String defaultCommand,
            List<BotHandler> botHandlers) {
        super(botToken);
        this.botUsername = botUsername;
        this.defaultCommand = defaultCommand;

        this.handlers = botHandlers.stream()
                .collect(Collectors.toMap(BotHandler::getCommand, Function.identity()));
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
     */
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText().trim();
            long chatId = update.getMessage().getChatId();

            if (!messageText.startsWith("/")) {
                logger.warn("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}: '{}'", chatId, messageText);
                return;
            }

            String commandKey = messageText.split(" ")[0].substring(1).toLowerCase();
            logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", commandKey, chatId);

            BotHandler handler = handlers.get(commandKey);

            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º `defaultCommand`
            if (handler == null) {
                logger.warn("‚ö† –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", commandKey);
                handler = handlers.get(defaultCommand);
                if (handler == null) {
                    logger.error("üö® –û—à–∏–±–∫–∞: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", defaultCommand);
                    throw new BotHandlerNotFound(commandKey);
                }
            }
            try {
                handler.handleMessage(chatId, messageText);
            } catch (TelegramApiException e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '{}': {}", commandKey, e.getMessage());
                throw new BotUpdateException(e.getMessage());
            }
        }
    }

    /**
     *  –°–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è TelegramMessageEvent –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
     */
    @EventListener
    public void handleTelegramMessageEvent(TelegramMessageEvent event) {
        try {
            execute(event.getMessage());
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }
}
