package com.skypro.starbank.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.skypro.starbank.model.rules.Rule;
import com.skypro.starbank.model.rules.RuleSet;
import com.skypro.starbank.model.rules.RuleSetWrapper;
import com.skypro.starbank.repository.TransactionRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class RuleServiceImpl implements RuleService {
    private static final Logger logger = LoggerFactory.getLogger(RuleServiceImpl.class);
    private static final String RULES_FILE = "./rules.json";
    private static final String TEMP_RULES_FILE = "rules_tmp.json";

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final ConcurrentHashMap<String, RuleSet> rulesMap = new ConcurrentHashMap<>();
    private final TransactionRepository transactionRepository;
    private final String rulesFilePath;


    @Autowired
    public RuleServiceImpl(TransactionRepository transactionRepository, @Value(RULES_FILE) String rulesFilePath) {
        this.transactionRepository = transactionRepository;
        this.rulesFilePath = rulesFilePath;
        loadRules();
    }

    public RuleServiceImpl() {
        throw new UnsupportedOperationException("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!");
    }

    private void loadRules() {
        File file = new File(rulesFilePath);
        if (file.exists()) {
            try {
                RuleSetWrapper wrapper = objectMapper.readValue(file, RuleSetWrapper.class);
                wrapper.getRules().forEach(set -> {
                    rulesMap.put(set.getProductId(), set);
                    logger.debug("üìå –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ: {}", set);
                });
                logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {}. –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: {}", rulesFilePath, rulesMap.size());
            } catch (IOException e) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª –∏–∑ {}: {}", rulesFilePath, e.getMessage());
            }
        } else {
            logger.warn("‚ö† –§–∞–π–ª {} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª.", rulesFilePath);
        }
    }


    @Override
    public List<RuleSet> getAllRules() {
        logger.debug("üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}", rulesMap.size());
        return List.copyOf(rulesMap.values());
    }

    @Override
    public RuleSet getRulesByProductId(String productId) {
        logger.debug("üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID: {}", productId);
        return rulesMap.get(productId);
    }

    @Override
    public void setRules(List<RuleSet> newRules) {
        rulesMap.clear();
        newRules.forEach(set -> rulesMap.put(set.getProductId(), set));
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}", rulesMap.size());
        saveRulesAsync();
    }

    @Override
    public void updateRulesForProduct(String productId, List<Rule> newConditions) {
        RuleSet ruleSet = rulesMap.get(productId);
        if (ruleSet != null) {
            ruleSet.setConditions(newConditions);
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID: {}", productId);
            saveRulesAsync();
        } else {
            logger.warn("‚ö† –ü—Ä–æ–¥—É–∫—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", productId);
        }
    }

    @Async
    public void saveRulesAsync() {
        File tempFile = new File(TEMP_RULES_FILE);
        File targetFile = new File(RULES_FILE);

        try {
            RuleSetWrapper wrapper = new RuleSetWrapper();
            wrapper.setRules(getAllRules());

            objectMapper.writerWithDefaultPrettyPrinter().writeValue(tempFile, wrapper);
            Files.move(tempFile.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING);

            logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ rules.json.");
        } catch (IOException e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {}", e.getMessage());
        }
    }

    @Override
    public boolean checkRulesForUser(String userId, RuleSet ruleSet) {
        logger.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É {}", userId, ruleSet.getProductId());
        boolean result = ruleSet.getConditions().stream().allMatch(rule -> evaluateRule(userId, rule));
        logger.debug("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, result);
        return result;
    }

    private boolean evaluateRule(String userId, Rule rule) {
        logger.debug("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–¢–∏–ø: {}, –ó–Ω–∞—á–µ–Ω–∏–µ: {})",
                rule.getType(), userId, rule.getProductType(), rule.getValue());

        return switch (rule.getType()) {
            case "HAS_PRODUCT" -> {
                boolean result = hasProduct(userId, rule.getProductType()) != rule.isNegate();
                logger.debug("‚úÖ HAS_PRODUCT {} -> {}", rule.getProductType(), result);
                yield result;
            }
            case "SUM_DEPOSIT" -> {
                double totalDeposits = getTotalDeposits(userId, rule.getProductType());
                boolean result = compare(totalDeposits, rule.getOperator(), getSafeValue(rule));
                logger.debug("‚úÖ SUM_DEPOSIT {} -> {} {} {} -> {}",
                        rule.getProductType(), totalDeposits, rule.getOperator(), rule.getValue(), result);
                yield result;
            }
            case "SUM_EXPENSE" -> {
                double totalExpenses = getTotalExpenses(userId, rule.getProductType());
                logger.debug("üí∏ SUM_EXPENSE –¥–ª—è {}: —Ç–∏–ø={} —Å—É–º–º–∞={}", userId, rule.getProductType(), totalExpenses);
                boolean result = compare(totalExpenses, rule.getOperator(), getSafeValue(rule));
                logger.debug("‚úÖ SUM_EXPENSE {} -> {} {} {} -> {}", rule.getProductType(), totalExpenses, rule.getOperator(), rule.getValue(), result);
                yield result;
            }
            case "OR" -> {
                if (rule.getConditions() == null || rule.getConditions().isEmpty()) {
                    logger.warn("‚ö† OR-—É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø—É—Å—Ç–æ!", userId);
                    yield false;
                }
                logger.debug("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º OR-—É—Å–ª–æ–≤–∏–µ: {}", rule.getConditions());
                boolean result = rule.getConditions().stream().anyMatch(subRule -> {
                    boolean subResult = evaluateRule(userId, subRule);
                    logger.debug("‚úÖ –ü–æ–¥—É—Å–ª–æ–≤–∏–µ OR: {} -> {}", subRule, subResult);
                    return subResult;
                });
                logger.debug("‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ OR: {} -> {}", rule.getConditions(), result);
                yield result;
            }
            case "AND" -> {
                if (rule.getConditions() == null || rule.getConditions().isEmpty()) {
                    logger.warn("‚ö† AND-—É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø—É—Å—Ç–æ!", userId);
                    yield false;
                }
                boolean result = rule.getConditions().stream().allMatch(subRule -> evaluateRule(userId, subRule));
                logger.debug("‚úÖ AND-—É—Å–ª–æ–≤–∏–µ: {} -> {}", rule.getConditions(), result);
                yield result;
            }
            default -> {
                logger.warn("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {}", rule.getType());
                yield false;
            }
        };
    }



    private double getSafeValue(Rule rule) {
        return rule.getValue() != null ? rule.getValue() : 0.0;
    }

    private boolean hasProduct(String userId, String productType) {
        boolean result = transactionRepository.userHasProduct(userId, productType);
        logger.debug("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {} –ø—Ä–æ–¥—É–∫—Ç {}", userId, result ? "–∏–º–µ–µ—Ç" : "–ù–ï –∏–º–µ–µ—Ç", productType);
        return result;
    }

    private double getTotalDeposits(String userId, String productType) {
        double total = transactionRepository.getTotalDeposits(userId, productType);
        logger.debug("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", productType, userId, total);
        return total;
    }

    private double getTotalExpenses(String userId, String productType) {
        double total = transactionRepository.getTotalExpenses(userId, productType);
        logger.debug("üí∏ –û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", productType, userId, total);
        return total;
    }

    private boolean compare(double actual, String operator, double value) {
        boolean result = switch (operator) {
            case ">" -> actual > value;
            case ">=" -> actual >= value;
            case "<" -> actual < value;
            case "<=" -> actual <= value;
            case "==" -> actual == value;
            case "!=" -> actual != value;
            default -> false;
        };
        logger.debug("üî¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {} {} {} -> {}", actual, operator, value, result);
        return result;
    }
}
