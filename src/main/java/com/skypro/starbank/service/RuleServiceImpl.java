package com.skypro.starbank.service;

import com.skypro.starbank.model.rules.Rule;
import com.skypro.starbank.model.rules.RuleSet;
import com.skypro.starbank.repository.RuleSetRepository;
import com.skypro.starbank.repository.TransactionRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class RuleServiceImpl implements RuleService {
    private static final Logger logger = LoggerFactory.getLogger(RuleServiceImpl.class);

    private final RuleSetRepository ruleSetRepository;
    private final TransactionRepository transactionRepository;

    public RuleServiceImpl(RuleSetRepository ruleSetRepository, TransactionRepository transactionRepository) {
        this.ruleSetRepository = ruleSetRepository;
        this.transactionRepository = transactionRepository;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∏–∑ –±–∞–∑—ã
     */
    @Override
    public List<RuleSet> getAllRules() {
        return ruleSetRepository.findAll();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª –ø–æ ID
     */
    @Override
    public RuleSet getRulesByProductId(String id) {
        return getRuleSetById(UUID.fromString(id)).orElse(new RuleSet());
    }


    private Optional<RuleSet> getRuleSetById(UUID id) {
        return ruleSetRepository.findByProductId(id);
    }


    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª
     */
    @Override
    @Transactional
    public RuleSet setRules(RuleSet ruleSet) {
        if (ruleSet == null) {
            throw new IllegalArgumentException("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π JSON");
        }
        // –î–∞–Ω–Ω—ã–π –±–ª–æ–∫ - –∑–∞—â–∏—Ç–∞ –æ—Ç –±–∞–≥–∞ Hibernate + Liquibase, –∫–∞—Å–∞—é—â–∏–π—Å—è –∞–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        if (ruleSet.getRules() != null) {
            for (Rule rule : ruleSet.getRules()) {
                rule.setRuleSet(ruleSet);
                rule.setId(null);
                logger.info("Rule ID: {} -> RuleSet ID: {}", rule.getId(), ruleSet.getId());
            }
        }
        logger.info("–°–æ–∑–¥–∞–Ω RuleSet: {}", ruleSet);

        return ruleSetRepository.save(ruleSet);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª
     */
    @Override
    @Transactional
    public void updateRulesForProduct(String id, RuleSet updatedRuleSet) {
        ruleSetRepository.findById(UUID.fromString(id)).map(existingRuleSet -> {
            existingRuleSet.setProductId(updatedRuleSet.getProductId());
            existingRuleSet.setProductName(updatedRuleSet.getProductName());
            existingRuleSet.setProductText(updatedRuleSet.getProductText());
            existingRuleSet.setRules(updatedRuleSet.getRules());
            return ruleSetRepository.save(existingRuleSet);
        }).orElseThrow(() -> new RuntimeException("–ù–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª –ø–æ ID
     */
    @Override
    @Transactional
    public void deleteRuleSet(UUID id) {
        ruleSetRepository.findByProductId(id).ifPresent(ruleSetRepository::delete);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    public boolean checkRulesForUser(String userId, RuleSet ruleSet) {
        logger.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É {}", userId, ruleSet.getProductId());
        boolean result = ruleSet.getRules().stream().allMatch(rule -> evaluateRule(userId, rule));
        logger.debug("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, result);
        return result;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
     */
    private boolean evaluateRule(String userId, Rule rule) {
        logger.debug("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {})",
                rule.getQuery(), userId, rule.getArguments());

        return switch (rule.getQuery()) {
            case "ACTIVE_USER_OF" -> {
                String productType = rule.getArgument(0);
                boolean result = hasProductActive(userId, productType) != rule.isNegate();
                logger.debug("‚úÖ ACTIVE_USER_OF {} -> {}", productType, result);
                yield result;
            }
            case "USER_OF" -> {
                String productType = rule.getArgument(0);
                boolean result = hasProduct(userId, productType) != rule.isNegate();
                logger.debug("‚úÖ USER_OF {} -> {}", productType, result);
                yield result;
            }
            case "TRANSACTION_SUM_COMPARE" -> {
                String productType = rule.getArgument(0);
                String transactionType = rule.getArgument(1);
                String operator = rule.getArgument(2);
                double value = Double.parseDouble(rule.getArgument(3));

                double total = getTotalAmount(userId, productType, transactionType);
                boolean result = compare(total, operator, value);
                logger.debug("‚úÖ TRANSACTION_SUM_COMPARE {} -> {} {} {} -> {}", productType, total, operator, value, result);
                yield result;
            }
            case "TRANSACTION_SUM_COMPARE_DEPOSIT_WITHDRAW" -> {
                String productType = rule.getArgument(0);
                String operator = rule.getArgument(1);

                double totalDeposits = getTotalAmount(userId, productType, "DEPOSIT");
                double totalWithdrawals = getTotalAmount(userId, productType, "EXPENSE");

                boolean result = compare(totalDeposits, operator, totalWithdrawals);
                logger.debug("‚úÖ TRANSACTION_SUM_COMPARE_DEPOSIT_WITHDRAW {} -> {} {} {} -> {}", productType, totalDeposits, operator, totalWithdrawals, result);
                yield result;
            }
            default -> {
                logger.warn("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {}", rule.getQuery());
                yield false;
            }
        };
    }

    private boolean hasProduct(String userId, String productType) {
        boolean result = transactionRepository.userHasProduct(userId, productType);
        logger.debug("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {} –ø—Ä–æ–¥—É–∫—Ç {}", userId, result ? "–∏–º–µ–µ—Ç" : "–ù–ï –∏–º–µ–µ—Ç", productType);
        return result;
    }

    private boolean hasProductActive(String userId, String productType) {
        boolean result = transactionRepository.userHasProductCount(userId, productType) >=5;
        logger.debug("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {} {} –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç {}", userId, result , productType);
        return result;
    }

    private double getTotalAmount(String userId, String productType, String transactionType) {
        double total = transactionType.equals("DEPOSIT")
                ? transactionRepository.getTotalDeposits(userId, productType)
                : transactionRepository.getTotalExpenses(userId, productType);
        logger.debug("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ {} {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", transactionType, productType, userId, total);
        return total;
    }

    private boolean compare(double actual, String operator, double value) {
        boolean result = switch (operator) {
            case ">" -> actual > value;
            case ">=" -> actual >= value;
            case "<" -> actual < value;
            case "<=" -> actual <= value;
            case "==" -> actual == value;
            case "!=" -> actual != value;
            default -> false;
        };
        logger.debug("üî¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {} {} {} -> {}", actual, operator, value, result);
        return result;
    }
}
