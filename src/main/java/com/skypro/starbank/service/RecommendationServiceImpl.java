package com.skypro.starbank.service;

import com.skypro.starbank.exception.UserNotFoundException;
import com.skypro.starbank.model.Recommendation;
import com.skypro.starbank.model.RecommendationResponse;
import com.skypro.starbank.model.User;
import com.skypro.starbank.model.rules.RuleSet;
import com.skypro.starbank.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class RecommendationServiceImpl implements RecommendationService {
    private static final Logger logger = LoggerFactory.getLogger(RecommendationServiceImpl.class);
    private final RuleService ruleService;
    private final UserRepository userRepository;

    public RecommendationServiceImpl(RuleService ruleService, UserRepository userRepository) {
        this.ruleService = ruleService;
        this.userRepository = userRepository;
    }

    @Override
    @Transactional
    public RecommendationResponse getRecommendations(String userId) {
        if (userId == null) {
            logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, userId —Ä–∞–≤–Ω–æ null");
            return new RecommendationResponse(null, List.of());
        }
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", userId);
        List<RuleSet> allRules = ruleService.getAllRules();
        List<Recommendation> recommendations = allRules.stream()
                .filter(ruleSet -> ruleService.checkRulesForUser(userId, ruleSet))
                .map(ruleSet -> {
                    logger.debug("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {}: {}", ruleSet.getProductId(), ruleSet.getProductName());
                    ruleService.incrementRuleStat(ruleSet.getId());
                    return new Recommendation(
                            ruleSet.getProductName(),
                            ruleSet.getProductId().toString(),
                            ruleSet.getProductText());
                })
                .toList();

        logger.info("üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–ª—É—á–∏–ª {} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.", userId, recommendations.size());
        return new RecommendationResponse(userId, recommendations);
    }

    @Override
    public RecommendationResponse getRecommendationsByUserName(String username) {
        User user = userRepository.findUserByName(username);
        logger.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user);
        if (user == null) {
            throw new UserNotFoundException();
        }
        return getRecommendations(user.getId());
    }
}